#!/usr/bin/env python
"""
Add your desired parameters here. All required headers will be generated from this.
!!!IMPORTANT this file must be executable !!!

Use one of these commands to add parameters to your parameter struct:

def add(self, name, paramtype, description, level=0, edit_method='""', default=None, min=None, max=None, configurable=False, global_scope=False, constant=False):
        Adds parameters to your parameter struct.

def add_enum(self, name, description, entry_strings, default=None, paramtype='int'):
        Adds an enum to dynamic reconfigure

def add_group(self, name):
        Create a parameter group for the dynamic_reconfigure window

def add_publisher(self, name, message_type, description, default_topic="", default_queue_size=5, topic_param=None,
                  queue_size_param=None, header=None, module=None, configurable=False, scope='private',
                  constant=False):
        Adds an initialized publisher to your parameter struct and parameter for its topic and queue size

def add_subscriber(self, name, message_type, description, default_topic="", default_queue_size=5, no_delay=False,
                   topic_param=None, queue_size_param=None, header=None, module=None, configurable=False,
                   scope='private', constant=False):
        Adds an initialized subscriber to your parameter struct and parameters for topic and queue size.


For more information on the API, see here: https://gitlab.mrt.uni-karlsruhe.de/MRT/rosinterface_handler/blob/master/doc/HowToWriteYourFirstInterfaceFile.md
"""
from rosinterface_handler.interface_generator_catkin import *

gen = InterfaceGenerator()

# Add a parameter for changing verbosity (=log level) on the fly
gen.add_verbosity_param(configurable=True)

# Your Params here
gen.add("dummy", paramtype='double', description="My Dummy Parameter", default=0.1, min=0, max=1, configurable=True, global_scope=False)

gen.add("loop_timer_rate", paramtype='double', description=" loop rate", default=20.0, min=1.0, max=200.0, configurable=True, global_scope=False)
gen.add("queue_size_msg", paramtype='int', description="Queusize for publisher", default=5, min=1,max=15,configurable=True, global_scope=False)
gen.add("R_value", paramtype='int', description="die Elemente in Messrauschkovarianzmatrix R", default=4, min=0,max=100,configurable=True, global_scope=False)
gen.add("Q_shift", paramtype='double', description="die Elemente in Prozessrauschkovarianzmatrix Q for shift", default=0.25, min=0,max=20,configurable=True, global_scope=False)
gen.add("Q_velocity", paramtype='double', description="die Elemente in Prozessrauschkovarianzmatrix Q for velocity", default=0.01, min=0,max=20,configurable=True, global_scope=False)
gen.add("map_frame_id", paramtype='std::string', description="Frame id for map.", default='world')




# Publisher and subscriber (group name will show up in dynamic_repub_sub.add_subscriber("dummy_subscriber", message_type="std_msgs::Header", description="example subscriber", default_topic="in_topic", no_delay=True, configurable=True)

pub_sub = gen.add_group("Publisher and subscriber")
pub_sub.add_publisher("dummy_publisher", message_type="std_msgs::Header", description="example publisher", default_topic="out_topic", configurable=True)


pub_sub.add_subscriber("path_subscriber_01", message_type="nav_msgs::Path", description="example subscriber", default_topic="in_topic", no_delay=True, configurable=True)



# DO NOT TOUCH THIS LINE
#Syntax : Package, Node, Config Name(The final name will be FilterAndControlTarConfig)
exit(gen.generate("kitaf_navigation_ros_tool", "filter_and_control_tar", "FilterAndControlTar"))
